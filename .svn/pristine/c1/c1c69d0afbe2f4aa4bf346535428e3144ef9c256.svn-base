package org.hdcd.controller.professor.lecture_manage;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.hdcd.service.professor.ILecOpenListService;
import org.hdcd.vo.LecOpenListVO;
import org.hdcd.vo.LecturePlanVO;
import org.hdcd.vo.MemberVO;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/lol")
public class ProfessorLecOpenListController {
	
	
	@Inject
	private ILecOpenListService lolservice;
	
	@GetMapping(value = "/lecOpenList")
	public String lecOpenList(HttpServletRequest request) {
		HttpSession session = request.getSession();
		String userId = (String)session.getAttribute("userId");
		
		return "professor/lecOpenList";
	}
	
	// 팝업창 열기. 개설신청 버튼 클릭시 & 수정 버튼 클릭시
	@GetMapping(value = "/lectureOpenRegister/{state}/{lolCode}")
	public String professorInsertTest2(@PathVariable String state,@PathVariable String lolCode, Model model) {
		log.debug("state {}",state);
		log.debug("lolCode {}", lolCode);
		
		if(state.equals("update")) {
			model.addAttribute("formName", "update");
		}
		
		if(state.equals("insert")) {
			model.addAttribute("formName","insert");
		}
		
		return "professor/resigterForm/lectureOpenRegister";
	}
	
	@ResponseBody
	@GetMapping(value = "/lecOpenSelectList", produces = "application/json;charset=utf-8")
	public List<LecOpenListVO> lecOpenSelectList(HttpServletRequest request) throws Exception {
		log.debug("컨트롤러로 오긴 하나요?");
		
		HttpSession session = request.getSession();
		String userId = (String)session.getAttribute("userId");
		
		log.debug("userId  :   " + userId);
		
		List<LecOpenListVO> lecOpenListVO = lolservice.selectList(userId);
		
		return lecOpenListVO;
	}


	@ResponseBody
	@RequestMapping(value = "/insertLectureOpen", method = RequestMethod.POST)
	public String insertLectureOpen(LecOpenListVO lecOpenListVO, LecturePlanVO lecturePlanVO, HttpServletRequest request) throws Exception{
		HttpSession session = request.getSession();
		String userId = (String)session.getAttribute("userId");
		lecOpenListVO.setPmem_no(userId);
		log.debug("lecOpenListVO:" + lecOpenListVO);
		int rslt = lolservice.insertLecList(lecOpenListVO);
		log.debug("lolCode:" + lecOpenListVO.getLol_code());
		lecturePlanVO.setLol_code(lecOpenListVO.getLol_code());
		log.debug("lecturePlanVO" + lecturePlanVO);
		lolservice.insertLecPlan(lecturePlanVO);
		return "ok";
	}
	
	
	@ResponseBody
	@PostMapping(value = "/deleteLectureOpen", produces = "application/json;charset=utf-8")
	public String deleteLectureOpen(@RequestBody Map<String, String> mapData, HttpServletRequest request) throws Exception{
		HttpSession session = request.getSession();
		
		log.debug("너머온 값 확인: " + mapData.get("lol_code"));
		int rslt  = lolservice.deleteLecList(mapData.get("lol_code"));
		if(rslt > 0) {
			return "OK";			
		}
		return "NG";

	}
	
	
}
