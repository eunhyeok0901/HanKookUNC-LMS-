<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- 	자바빈 객체 -->
	<bean id="customAccessDenied" class="org.hdcd.controller.common.CustomAccessDeniedHandler"/>
<!-- 	CustomLoginSuccessHandler cus = new CustomLoginSuccessHandler() -->
	<bean id="customLoginSuccess" class="org.hdcd.controller.common.CustomLoginSuccessHandler"/>
	
<!-- 	사용자가 정의한 비밀번호 암호화 처리기를 빈으로 등록함 -->
<!-- 	<bean id="customPasswordEncoder" class="org.hdcd.security.CustomNoOpPasswordEncorder"></bean> -->

<!-- 	비밀번호 암호화 처리기	 -->
<!-- 	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean> -->

<!-- 	MEM : MEM_AUTH = 1 : N를 사용	 -->
<!-- 	<bean id="customUserDetailsService" class="org.hdcd.security.CustomUserDetailsService"></bean> -->

      
      <security:http>
<!--       		url 패턴으로 접근을 제한 -->
      		<security:intercept-url pattern="/page/list" access="hasRole('ROLE_ADMIN')"/>
      		<security:intercept-url pattern="/page/pageLogin" access="permitAll"/>
<!--       		<security:intercept-url pattern="/security/notice/list" access="permitAll"/> -->
<!--       		<security:intercept-url pattern="/security/notice/register" access="hasRole('ROLE_ADMIN')"/> -->
      
<!--       		폼 기반 인증 기능을 사용함 -->
<!-- 			<security:form-login/> -->
			
<!-- 			사용자 정의 로그인 페이지 -->
<!-- 			요청 url : /login -->
<!-- 			요청 method : get -->
<!-- 			1) org.hdcd.security.SecurityController.java 생성 -->
<!-- 			2) /login 요청 uri와 mapping된 loginForm 메소드를 정의 -->
<!-- 			3) views/loginForm.jsp 파일을 생성해보자. forwarding 처리 -->

<!-- 			로그인 : 인증(authentication) 성공 처리자
				ex) 로그인 성공 후에 로그인 이력을 기록
	 -->
			<security:form-login login-page="/pageLogin" authentication-success-handler-ref="customLoginSuccess" />
			
<!-- 			접근거부 처리자의 URI(url + 기능)를 지정(로그인실패) -->
<!-- 				<security:access-denied-handler error-page="/accessError" /> -->

<!-- 			customAccessDenied : 자바빈 객체 명  -->
			<security:access-denied-handler ref="customAccessDenied"/>
			
<!-- 			쿠키 유효시간 604800초 -> 7일 -->
<!-- 			<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/> -->
			
<!-- 			로그아웃 처리를 위한 URI를 지정하고, 로그아웃한 후에 세션을 무효화함 -->
<!-- 			<security:logout logout-url="/logout" invalidate-session="true" delete-cookies="remember-me,JSESSION_ID"/> -->
			
      </security:http>
      
<!--       authentication : 인증 -->
<!--       manager : 관리자 -->
      <security:authentication-manager>
<!--       		provider : 제공 -->
<!-- 				user-service-ref = > MEM : MEM_AUTH = 1 : N를 사용 -->
<!--       		<security:authentication-provider user-service-ref="customUserDetailsService"> -->
      		<security:authentication-provider>
      	
      		
<!--       			1) 데이터 소스를 지정 : USERS:AUTHORITIES = 1:N 사용-->
<!-- 					<security:jdbc-user-service data-source-ref="dataSource"/> -->
<!--       			2) 사용자가 정의한 비밀번호 암호화 처리기를 지정함 
						스프링 시큐리티 5부터는 기본적으로 passwordEncoder를 지정해야함
						제대로 하려면 users 테이블에 비밀번호를 암호화하여 저장해야함
						but, 우린 연습 중이므로 암호화를 고려하지 않음
-->
<!--       				<security:password-encoder ref="customPasswordEncoder"/> -->
<!--       				스프링 시큐리티에서 제공되는 BCryptPasswordEncoder 클래스를 빈으로 등록 -->
<!-- 					<security:password-encoder ref="bcryptPasswordEncoder"/> -->
      		
      			<security:user-service>
<!--       				noop : 스프링 시큐리티 5버전부터는 패스워드 암호화 처리기 사용이 필수 -->
<!--       				noop : 암호화 처리기를 사용하지 않겠다는 의미 -->

<!-- 					id : member pw : 1234 -->
      				<security:user name="member" password="{noop}1234"  authorities="ROLE_MEMBER"/>
<!-- 					id : member pw : 1234 -->
      				<security:user name="admin" password="{noop}abcd"  authorities="ROLE_MEMBER,ROLE_ADMIN"/>
      			</security:user-service>
      		</security:authentication-provider>
      </security:authentication-manager>
      
</beans>