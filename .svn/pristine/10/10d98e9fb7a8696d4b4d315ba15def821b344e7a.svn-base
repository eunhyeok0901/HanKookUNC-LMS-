package org.hdcd.service.student.community;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.hdcd.mapper.CommunityMapper;
import org.hdcd.vo.CommunityFileVO;
import org.hdcd.vo.CommunityVO;
import org.hdcd.vo.ReplyVO;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class CommunityServiceImpl implements ICommunityService{

	@Inject
	CommunityMapper mapper;
	
	@Override
	public int registerCmntPost(HttpServletRequest request, CommunityVO communityVO, List<MultipartFile> cmntfiles) throws IllegalStateException, IOException {
		// userId 및 제목 세팅
		String userId = (String) request.getSession().getAttribute("userId");
		log.debug("내 아이디는 " + userId);
		communityVO.setSmem_no(userId);
		log.debug("vo : " + communityVO.toString());
		// 커뮤니티 게시글 등록 후, selectKey로 게시글 번호를 가져온다.
		int cnt = mapper.registerCmntPost(communityVO);
		System.out.println("나의 넘버는" + communityVO.getCmnt_no()); //13, 앞에 cmnt 붙여줘야 함.
		String cmnt_no = "CMNT" + communityVO.getCmnt_no();
		
		// 게시글 등록에 성공했을 경우, 첨부파일도 추가 등록한다.
		if(cnt > 0 || cmntfiles.size() != 0 ) {
			
			ServletContext sc = request.getSession().getServletContext();
			String realPath = sc.getRealPath("/resources/uploads"); // 이클립스 가상 주소
			
			for (MultipartFile file : cmntfiles) {
				if(file.getOriginalFilename() != null) {					
					UUID uuid = UUID.randomUUID();
					long file_size = file.getSize();				
					// file_name, file_originnm, file_size, file_path, file_type
					String file_name = uuid + file.getOriginalFilename();
					String file_originnm = file.getOriginalFilename();
					String file_path = "/resources/uploads/" + file_name;
					String file_type = file.getContentType();
					
					log.debug("fileName:" + file_originnm);
					
					CommunityFileVO cmntfile = new CommunityFileVO(cmnt_no, file_name, file_originnm, file_size, file_path, file_type);
					
					cnt = mapper.registerCmntPostFile(cmntfile);
					
					// 첨부파일 정보가 db에 등록된 경우, 파일을 transfer
					file.transferTo(new File(realPath + "/" + file_name));				
				}
			}
		}
		return cnt;
	}

	@Override
	public Map<String, Object> getCmntTotalList() {
		List<CommunityVO> cmntList = mapper.getCmntTotalList();
		for (CommunityVO communityVO : cmntList) {
			String cmnt_no = communityVO.getCmnt_no();
			int replyCount = mapper.countReply(cmnt_no);
			communityVO.setReply_count(replyCount); // 게시글별 달린 댓글 개수를 저장한다.
		}
		
		List<CommunityFileVO> cmntFileList = mapper.getCmntFileTotalList();
		
		Map<String, Object> cmntTotalMap = new HashMap<String, Object>();
		cmntTotalMap.put("cmntList", cmntList);
		cmntTotalMap.put("cmntFileList", cmntFileList);
		return cmntTotalMap;
	}

	@Override
	public Map<String, Object> getCmntDetail(String cmnt_no) {
		CommunityVO communityVO = mapper.getCmnt(cmnt_no);
		
		int replyCount = mapper.countReply(cmnt_no);
		communityVO.setReply_count(replyCount);
		
		List<CommunityFileVO> communityFileVOList = mapper.getCmntFile(cmnt_no);
		List<ReplyVO> replyVOList = mapper.getCmntReply(cmnt_no);
	
		log.debug("communityVO.toString(): " + communityVO.toString());
		log.debug("communityFileVOList.toString()" + communityFileVOList.toString());
		log.debug("replyVOList" + replyVOList.toString());
		
		Map<String, Object> communityMap = new HashMap<String, Object>();
		communityMap.put("cmntVO", communityVO);
		communityMap.put("cmntFileVOList", communityFileVOList);
		communityMap.put("replyVOList", replyVOList);
		
		return communityMap;
	}

	@Override
	public int registerReply(ReplyVO replyVO) {
		return mapper.registerReply(replyVO);
	}

}
