package org.hdcd.controller.student.community;

import java.io.IOException;
import java.util.List;

import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.hdcd.service.student.community.ICommunityService;
import org.hdcd.vo.CommunityVO;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/community")
public class CommunityController {

	@Inject
	ICommunityService service;
	
	// 커뮤니티 페이지 요청
	@GetMapping
	public String communityHome(HttpServletRequest request, Model model) {
		log.debug("▶student communityHome");		
		String userId = (String) request.getSession().getAttribute("userId");
		model.addAttribute("smem_no", userId);
		
		return "student/community";
	}
	
	// 커뮤니티 게시글 등록

	@PostMapping(value="/register", produces = "application/json;charset=UTF-8")
	@ResponseBody
	public int registerCmntPost(HttpServletRequest request, CommunityVO communityVO, @Nullable List<MultipartFile> files) throws IllegalStateException, IOException {
		log.debug("▶student registerCmntPost");
		log.debug("communityVO : {}", communityVO.toString());
		log.debug("cmntFileArray: {}", files.toString());
		log.debug("cmntFileArray: {}", files.size());
		int cnt = service.registerCmntPost(request, communityVO, files);
		return 1;
	}
	
	// 커뮤니티 게시글 전체 리스트 produces = "application/json;charset=UTF-8"
	
	@ResponseBody
	@GetMapping(value = "/getCmntTotalList", produces = "application/json;charset=UTF-8")
	public List<CommunityVO> getCmntTotalList() {
		log.info("▶ getCmntTotalList");
		List<CommunityVO> CmntTotalList = service.getCmntTotalList();
		return CmntTotalList;
	}
	
	
	/*
	@ResponseBody
	@RequestMapping(value="/searchCmnt", produces = "text/plain;charset=UTF-8")
	public String searchCmnt(@RequestBody String cmnt_type, String cmnt_keyword) {
		log.info("▶ searchCmnt");
		return cmnt_type + cmnt_keyword;
	}
	*/
	
	/*
	@ResponseBody
	@GetMapping(value = "/detail/{cmnt_no}", produces = "application/json;charset=UTF-8")
	public CommunityVO getCmntDetail(@PathVariable String cmnt_no) {
		log.info("▶ getCmntDetail");
		CommunityVO communityVO = service.getCmntDetail(cmnt_no);
		log.info("communityVO.toString() : {}", communityVO.toString());
		return communityVO;	
	}
	*/
}
