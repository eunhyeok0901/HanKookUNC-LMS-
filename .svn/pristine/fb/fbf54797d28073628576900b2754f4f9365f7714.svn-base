<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<style type="text/css">
#fileDragArea:active {
	background: #eee;
}
</style>

<h4 class="card-title">
	<i class="fa-solid fa-graduation-cap"></i>커뮤니티
</h4>

<div class="bootstrap-modal">
	<!-- Button trigger modal -->
	<button type="button" class="btn mb-1 btn-dark" data-toggle="modal"
		data-target="#basicModal">글쓰기</button>
	<!-- Modal -->
	<div class="modal fade" id="basicModal" style="display: none;" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">새로운 게시글 작성하기</h5>
					<button type="button" class="close" data-dismiss="modal">
						<span>×</span>
					</button>
				</div>
				<!-- 커뮤니티 등록 폼 시작 -->
				<div class="form-validation">
					<form class="form-valide" action="#" method="post"
						id="cmntRegisterForm" novalidate="novalidate">
						<div class="modal-body">
							<input type="hidden" name="smem_no" id="smem_no"
								value="${smem_no }">
							<div class="form-group row">
								<div class="col-lg-12" style="display: flex;">
									<select class="form-control" id="cmnt_category"
										name="cmnt_category" required>
										<option value="" disabled="disabled" selected="selected">말머리
											선택</option>
										<option value="토론">토론</option>
										<option value="정보">정보</option>
										<option value="마켓">마켓</option>
										<option value="잡담">잡담</option>
										<option value="기타">기타</option>
									</select> <select class="form-control" id="cmnt_feeling"
										name="cmnt_feeling" required="required">
										<option value="" disabled="disabled" selected="selected">느낌
											선택</option>
										<option value="기쁨">기쁨</option>
										<option value="분노">분노</option>
										<option value="슬픔">슬픔</option>
										<option value="즐거움">즐거움</option>
										<option value="사랑">사랑</option>
										<option value="희망">희망</option>
									</select>
								</div>
							</div>

							<div class="form-group">
								<div class="form-check form-check-inline">
									<label class="form-check-label"> <input type="checkbox"
										class="form-check-input" value="1" name="cmnt_anony"
										id="cmnt_anony"> <font
										style="vertical-align: inherit;"> <font
											style="vertical-align: inherit;">익명으로 작성</font>
									</font>
									</label>
								</div>
							</div>

							<div class="form-group">
								<input type="text" class="form-control input-flat"
									placeholder="제목을 입력하세요" name="cmnt_title" id="cmnt_title"
									style="border-left: none; border-right: none; border-top: none;"
									required="required">
							</div>

							<div class="form-group">
								<textarea class="form-control h-150px" rows="6"
									name="cmnt_content" id="cmnt_content" style="height: 114px;"
									placeholder="내용을 입력하세요" required="required"></textarea>
							</div>

							<div class="form-group">
								<input type="file" id="cmntFiles" name="cmntFiles"
									multiple="multiple" accept=".jpg,.gif,.png">
								<code>*이미지 파일만 가능</code>
							</div>

							<div class="alert alert-success" id="fileDragArea"
								style="height: 100px; text-align: center; align-items: center;">
								<font style="vertical-align: inherit;">사진 파일을 이곳으로 끌어오세요</font>
							</div>
							<div id="fileShowArea"
								style="display: grid; grid-template-columns: repeat(3, 1fr); overflow: scroll; overflow-x: hidden; overflow-y: hidden;"></div>
							<div class="alert alert-danger" style="display: none;" id="successMessage">등록에 성공하였습니다. 3초 뒤에 창이 닫힙니다.</div>
							<div class="alert alert-dark" style="display: none;" id="failMessage">등록에 실패했습니다. 추후에 다시 시도해주십시오. 3초 뒤에 창이 닫힙니다.</div>
						</div>
						<div class="modal-footer">
							<div class="form-group row">
								<div class="col-lg-12 ml-auto"
									style="display: flex; justify-content: space-between;">
									<button type="button" class="btn btn-danger"
										data-dismiss="modal">취소</button>
									<button type="submit" class="btn btn-success">등록</button>
								</div>
							</div>
						</div>
					</form>
				</div>
				<!-- 커뮤니티 등록 폼 종료 -->
			</div>
		</div>
	</div>
</div>

<%@ include file="communityHeader.jsp" %>

<div class="row" id="cmntListDiv">
 <!--
	<div class="col-md-6 col-lg-3">
		<div class="card">
			<div class="card-header bg-white">
				<h5 class="card-title">카드 제목</h5>
				<h6 class="card-subtitle mb-2 text-muted">
					<i class="fa-regular fa-heart"></i> 0 <i
						class="fa-regular fa-comment"></i> 0
				</h6>
			</div>
			<img class="img-fluid"
				src="${pageContext.request.contextPath }/resources/images/망그곰1.png"
				alt="">
			<div class="card-body">
				<p class="card-text">카드 내용</p>
			</div>
			<div class="card-footer">
				<p class="card-text d-inline">
					<small class="text-muted">1분 전</small>
				</p>
				<a href="#" class="card-link float-right"><small>상세 보기</small></a>
			</div>
		</div>
	</div>
	-->
</div>
<div></div>
<script type="text/javascript">
//아작스 통신을 위한 csrf 인증 토큰
let header = '${_csrf.headerName}';
let token = '${_csrf.token}';

// 무한스크롤을 통해 리스트를 불러올 div
const cmntListDiv = document.querySelector("#cmntListDiv");
//스크롤 항상 위에 올려 놓기
window.onload = () =>{
  setTimeout(()=>{
    window.scrollTo(0,0);
  }, 30);

	getCmntTotalList();
} 

function getCmntTotalList(){
	let xhr = new XMLHttpRequest();
	xhr.open("get", "/community/getCmntTotalList", true);
	xhr.setRequestHeader(header, token);
	xhr.onreadystatechange = function(){
		if(xhr.readyState == 4 && xhr.status == 200){
			console.log("데이터가 왔어요");
			let data = JSON.parse(xhr.responseText);
			template_getCmntTotalList(data);
		}
	};
	xhr.send();
}

function template_getCmntTotalList(data){
	let cmntList = data.cmntList;
	console.log(cmntList);
	let cmntFileList = data.cmntFileList;
	
	let str ="";
	
	for(let i = 0; i < cmntList.length; i++){	
		let smem_no = cmntList[i].smem_no;
		let cmnt_anony = cmntList[i].cmnt_anony;
		if(cmnt_anony > 0){
			smem_no = "익명의 한국대생";
		}
		
		str += "<div class='col-md-6 col-lg-3'>";
	  	str +=	"<div class='card'>";
	  	str +=			"<div class='card-header bg-white'>";
	  	str +=          "<span class='badge badge-dark'>" + cmntList[i].cmnt_category + "</span>";
	  	str +=          "<span class='badge badge-light'>" + cmntList[i].cmnt_feeling + "</span>&nbsp;";
		str +=			"<h5 class='card-title' style='display:inline-block;'>"+ cmntList[i].cmnt_title +"</h5>";
		str +=			"<h6 class='card-subtitle mb-2 text-muted'>";
		str +=              smem_no + "&nbsp;&nbsp;";
		str +=				"<i class='fa-regular fa-heart'></i>&nbsp;" + cmntList[i].cmnt_like + "&nbsp;";
		str +=				"<i class='fa-regular fa-comment'></i>&nbsp;" + cmntList[i].reply_count + "&nbsp;";
		str +=				"<i class='fa-regular fa-eye'></i> &nbsp;" + cmntList[i].cmnt_count + "&nbsp;";
		str +=			"</h6>";
		str +=		"</div>";
		
		let imgCnt = 0;
		let imgStr = "";
		for(let j = 0; j < cmntFileList.length; j++){
			if(cmntList[i].cmnt_no == cmntFileList[j].cmnt_no && imgCnt == 0){
				imgCnt++;
				imgStr +=		"<img class='img-fluid'";
				imgStr +=			"src='${pageContext.request.contextPath }" + cmntFileList[j].file_path + "' ";
				imgStr +=			"alt='" + cmntFileList[j].file_originnm + "' width='100%' height='100%'>";
				break;
			}
		}
		
		if(imgStr == ""){
			imgStr +=		"<img class='img-fluid'";
			imgStr +=			"src='${pageContext.request.contextPath }/resources/uploads/community_default.jpg'";
			imgStr +=			"alt='한국대생의커뮤니티'>";
		}
		str += imgStr;
				
		str +=		"<div class='card-body'>";
		str +=			"<p class='card-text'>"+ cmntList[i].cmnt_content +"</p>";
		str +=		"</div>";
		str +=		"<div class='card-footer'>";
		str +=			"<p class='card-text d-inline'>";
		
		let date = cmntList[i].cmnt_date;
		date = formatTime(date);
		
		str +=				"<small class='text-muted'>"+ date +"</small>";
		str +=			"</p>";
		str +=			"<a href='${pageContext.request.contextPath}/community/detail/" + cmntList[i].cmnt_no + "' class='card-link float-right'><small>상세 보기</small></a>";
		str +=		"</div>";
		str +=	"</div>";
		str += "</div>";
		
	};
		
	cmntListDiv.innerHTML = str;
}

// window의 dragover, drop 시의 빌트인 기능을 막음
const builtInBlock = () => { event.preventDefault(); }
window.addEventListener("dragover", builtInBlock);
window.addEventListener("drop", builtInBlock);

// 파일을 드래그할 div, 드래그한 파일을 보여줄 div
const fileDragArea = document.querySelector("#fileDragArea");
const fileShowArea = document.querySelector("#fileShowArea");
// 파일
const cmntFiles = document.querySelector("#cmntFiles");

// 파일을 모으는 배열
const cmntFileArray = [];

// 커뮤니티 새글 등록 폼
const cmntRegisterForm = document.querySelector("#cmntRegisterForm");

// 등록 성공 메시지
const successMessage =  document.querySelector("#successMessage");
const failMessage =  document.querySelector("#failMessage");

// 새글 등록
cmntRegisterForm.addEventListener("submit", function(event){
	event.preventDefault();
	let files = cmntFiles.files;
	console.log(files);
	
	var formData = new FormData(cmntRegisterForm);
	
	if(files.length > 0){
		for(let i = 0; i < files.length; i++){
			formData.append("files", files[i]); // 같은 이름으로 append하면 배열이 된다.
		};		
	}
	
	console.log("cmntFileArray 출력");
	if(cmntFileArray.length > 0){
		for(let i = 0; i < cmntFileArray.length; i++){
			formData.append("files", cmntFileArray[i]); // 같은 이름으로 append하면 배열이 된다.
		};		
	}
	

	let xhr = new XMLHttpRequest();
	xhr.open("post", "/community/register", true);
	xhr.setRequestHeader(header, token);
	xhr.onreadystatechange = () => {
		if(xhr.readyState == 4 && xhr.status == 200){
			let check = xhr.responseText;
			if(check == 1){				
				successMessage.style.display = "block";
			}else if(check == 0){
				failMessage.style.display = "block";
			}
			

			setTimeout(function() {
				document.querySelector(".close").click();
				successMessage.style.display = "none";
				failMessage.style.display = "none";
				cmntRegisterForm.reset();
				fileShowArea.innerHTML = "";
			}, 3000);
			
			getCmntTotalList();
		}
	}
	xhr.send(formData);
})

// fileDragArea에 dragover 시 빌트인 기능을 막음
fileDragArea.addEventListener("dragover", ()=>{
  event.preventDefault();
});

// 파일 추가 혹은 파일 드래그시 그 겉을 둘러싸는 박스를 만드는 함수
function dramImgBox(){
	let iDiv = document.createElement("div");
	iDiv.setAttribute("class", "alert alert-primary alert-dismissible fade show");
	iDiv.setAttribute("style", "display:inline-block;");

	let iBtn = document.createElement("button");
	iBtn.setAttribute("type", "button");
	iBtn.setAttribute("class", "class");
	iBtn.setAttribute("class", "close");
	iBtn.setAttribute("data-dismiss", "alert");
	iBtn.setAttribute("aria-label", "close");

	let iSpan = document.createElement("span");
	iSpan.textContent = "x";
	iSpan.setAttribute("class", "closeSpan");
	
	iBtn.appendChild(iSpan);
	iDiv.appendChild(iBtn);
	fileShowArea.appendChild(iDiv);
	return iDiv;
}

// 파일 드래그 칸에 drop 시 이미지와 이미지정보를 화면에 출력
fileDragArea.addEventListener("drop", ()=>{
  event.preventDefault();
  let dragFiles = event.dataTransfer.files;
  console.log(dragFiles);
  for(let i = 0; i < dragFiles.length; i++){
    let fileReader = new FileReader();
    fileReader.readAsDataURL(dragFiles[i]); // 바이너리 파일을 읽어들임
    fileReader.onload = () =>{
    
		let iDiv = dramImgBox();
		
		let myImg = document.createElement("img");
		myImg.src = fileReader.result;
		console.log(fileReader.result);
		myImg.width = 80;
		myImg.height = 80;
 		iDiv.appendChild(myImg);
		
		let uuid = self.crypto.randomUUID();

		let myImgInfo = document.createElement("p");
		myImgInfo.textContent = dragFiles[i].name;
		myImgInfo.value = uuid + dragFiles[i].name;
		iDiv.appendChild(myImgInfo);
 		
		console.log(decodeURI(fileReader.result));
		console.log(dragFiles[i].name);
		console.log(dragFiles[i].size);
		console.log(dragFiles[i].type);

		
		cmntFileArray.push(base64toFile(fileReader.result, dragFiles[i].name));
    }
  }
});

// 파일 타입에서 파일을 추가할 경우 이미지와 이미지정보를 화면에 출력
cmntFiles.addEventListener("change", function(){
	console.log(cmntFiles.files);
	
	for(let i = 0; i < cmntFiles.files.length; i++){
		let fileReader = new FileReader();
		fileReader.readAsDataURL(cmntFiles.files[i]);
		fileReader.onload = () =>{

			let iDiv = dramImgBox();
			let myImg = document.createElement("img");
			myImg.src = fileReader.result;
			console.log(fileReader.result);
			myImg.width = 80;
			myImg.height = 80;
			iDiv.appendChild(myImg);

			let uuid = self.crypto.randomUUID();			
			
			let myImgInfo = document.createElement("p");
			myImgInfo.textContent = cmntFiles.files[i].name;
			myImgInfo.value = uuid + cmntFiles.files[i].name;
			iDiv.appendChild(myImgInfo);
			
		}
	}
})

// base64를 파일데이터로 변환
function base64toFile(base64_data, fileName) {
	let arr = base64_data.split(','),
	mime = arr[0].match(/:(.*?);/)[1],
	bstr = atob(arr[1]),
	n = bstr.length,
	u8arr = new Uint8Array(n);

	while(n--){
			u8arr[n] = bstr.charCodeAt(n);
	}
	return new File([u8arr], fileName, {type:mime});
}	

// 오라클 시간 데이터를 넘기면 '~분 전/ ~시간 전'과 같은 형태로 바꿔주는 함수
function formatTime(oracleDate){
	
	let writeDate = oracleDate;
	writeDate =  writeDate.replaceAll("-","").replaceAll(":", "").replaceAll(".","").replaceAll(" ","");
	let wYear = writeDate.substr(0,4);
	let wMonth = writeDate.substr(4,2);
	let wDay = writeDate.substr(6,2);
	let wHours = writeDate.substr(8,2);
	let wMinutes = writeDate.substr(10,2);
	
	let nowDate = new Date(); 
	let nYear = nowDate.getFullYear();
	let nMonth = nowDate.getMonth()+1;                            
	let nDay = nowDate.getDate();        
	let nHours = nowDate.getHours();     
	let nMinutes = nowDate.getMinutes(); 
	
	let write = new Date(wYear, wMonth, wDay, wHours, wMinutes);
	let now = new Date(nYear, nMonth, nDay, nHours, nMinutes);

    const betweenTime = Math.floor((now.getTime() - write.getTime()) / 1000 / 60);
    
    if (betweenTime < 1) return "방금 전";
    if (betweenTime < 60) {
      return `\${betweenTime}분전`;
    }

    const betweenTimeHour = Math.floor(betweenTime / 60);
    if (betweenTimeHour < 24) {
      return `\${betweenTimeHour}시간 전`;
    }

    const betweenTimeDay = Math.floor(betweenTime / 60 / 24);
    if (betweenTimeDay < 365) {
      return `\${betweenTimeDay}일 전`;
    }

    return `\${Math.floor(betweenTimeDay / 365)}년 전`;
}

// 무한 스크롤
/*
const appendData = function(){
	let str = "";
	for(let i = 0; i <= 20; i++){
		str += `<h1>\${i}번째 데이터</h1>`;
	}
  cmntListDiv.innerHTML += str;
}
*/
/*
window.addEventListener("scroll", () =>{
	let scrollTop = document.documentElement.scrollTop; // 내가 지나친 높이
	let clientHeight = document.documentElement.clientHeight; // 내가 보는 높이
	let scrollHeight = document.documentElement.scrollHeight; // 문서 전체 높이

	let tuning = 50;

	if((scrollTop + clientHeight) >= (scrollHeight-tuning)){
		console.log("나야");
		appendData();
		console.log("나 실행할게");
	}
});
*/
</script>